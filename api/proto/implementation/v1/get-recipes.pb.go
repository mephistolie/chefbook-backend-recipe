// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.25.2
// source: v1/get-recipes.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RecipeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipeId          string                 `protobuf:"bytes,1,opt,name=recipeId,proto3" json:"recipeId,omitempty"`
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	OwnerId           string                 `protobuf:"bytes,3,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	OwnerName         *string                `protobuf:"bytes,4,opt,name=ownerName,proto3,oneof" json:"ownerName,omitempty"`
	OwnerAvatar       *string                `protobuf:"bytes,5,opt,name=ownerAvatar,proto3,oneof" json:"ownerAvatar,omitempty"`
	IsOwned           bool                   `protobuf:"varint,6,opt,name=isOwned,proto3" json:"isOwned,omitempty"`
	IsSaved           bool                   `protobuf:"varint,7,opt,name=isSaved,proto3" json:"isSaved,omitempty"`
	Visibility        string                 `protobuf:"bytes,8,opt,name=visibility,proto3" json:"visibility,omitempty"`
	IsEncrypted       bool                   `protobuf:"varint,9,opt,name=isEncrypted,proto3" json:"isEncrypted,omitempty"`
	Language          string                 `protobuf:"bytes,10,opt,name=language,proto3" json:"language,omitempty"`
	Translations      []string               `protobuf:"bytes,11,rep,name=translations,proto3" json:"translations,omitempty"`
	Preview           *string                `protobuf:"bytes,12,opt,name=preview,proto3,oneof" json:"preview,omitempty"`
	CreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=creationTimestamp,proto3" json:"creationTimestamp,omitempty"`
	UpdateTimestamp   *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=updateTimestamp,proto3" json:"updateTimestamp,omitempty"`
	Version           int32                  `protobuf:"varint,15,opt,name=version,proto3" json:"version,omitempty"`
	Rating            float32                `protobuf:"fixed32,16,opt,name=rating,proto3" json:"rating,omitempty"`
	Score             *int32                 `protobuf:"varint,17,opt,name=score,proto3,oneof" json:"score,omitempty"`
	Votes             int32                  `protobuf:"varint,18,opt,name=votes,proto3" json:"votes,omitempty"`
	Tags              []string               `protobuf:"bytes,19,rep,name=tags,proto3" json:"tags,omitempty"`
	Categories        []string               `protobuf:"bytes,20,rep,name=categories,proto3" json:"categories,omitempty"`
	IsFavourite       bool                   `protobuf:"varint,21,opt,name=isFavourite,proto3" json:"isFavourite,omitempty"`
	Servings          *int32                 `protobuf:"varint,22,opt,name=servings,proto3,oneof" json:"servings,omitempty"`
	Time              *int32                 `protobuf:"varint,23,opt,name=time,proto3,oneof" json:"time,omitempty"`
	Calories          *int32                 `protobuf:"varint,24,opt,name=calories,proto3,oneof" json:"calories,omitempty"`
}

func (x *RecipeInfo) Reset() {
	*x = RecipeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_get_recipes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecipeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecipeInfo) ProtoMessage() {}

func (x *RecipeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_get_recipes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecipeInfo.ProtoReflect.Descriptor instead.
func (*RecipeInfo) Descriptor() ([]byte, []int) {
	return file_v1_get_recipes_proto_rawDescGZIP(), []int{0}
}

func (x *RecipeInfo) GetRecipeId() string {
	if x != nil {
		return x.RecipeId
	}
	return ""
}

func (x *RecipeInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecipeInfo) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *RecipeInfo) GetOwnerName() string {
	if x != nil && x.OwnerName != nil {
		return *x.OwnerName
	}
	return ""
}

func (x *RecipeInfo) GetOwnerAvatar() string {
	if x != nil && x.OwnerAvatar != nil {
		return *x.OwnerAvatar
	}
	return ""
}

func (x *RecipeInfo) GetIsOwned() bool {
	if x != nil {
		return x.IsOwned
	}
	return false
}

func (x *RecipeInfo) GetIsSaved() bool {
	if x != nil {
		return x.IsSaved
	}
	return false
}

func (x *RecipeInfo) GetVisibility() string {
	if x != nil {
		return x.Visibility
	}
	return ""
}

func (x *RecipeInfo) GetIsEncrypted() bool {
	if x != nil {
		return x.IsEncrypted
	}
	return false
}

func (x *RecipeInfo) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *RecipeInfo) GetTranslations() []string {
	if x != nil {
		return x.Translations
	}
	return nil
}

func (x *RecipeInfo) GetPreview() string {
	if x != nil && x.Preview != nil {
		return *x.Preview
	}
	return ""
}

func (x *RecipeInfo) GetCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.CreationTimestamp
	}
	return nil
}

func (x *RecipeInfo) GetUpdateTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTimestamp
	}
	return nil
}

func (x *RecipeInfo) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *RecipeInfo) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *RecipeInfo) GetScore() int32 {
	if x != nil && x.Score != nil {
		return *x.Score
	}
	return 0
}

func (x *RecipeInfo) GetVotes() int32 {
	if x != nil {
		return x.Votes
	}
	return 0
}

func (x *RecipeInfo) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *RecipeInfo) GetCategories() []string {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *RecipeInfo) GetIsFavourite() bool {
	if x != nil {
		return x.IsFavourite
	}
	return false
}

func (x *RecipeInfo) GetServings() int32 {
	if x != nil && x.Servings != nil {
		return *x.Servings
	}
	return 0
}

func (x *RecipeInfo) GetTime() int32 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *RecipeInfo) GetCalories() int32 {
	if x != nil && x.Calories != nil {
		return *x.Calories
	}
	return 0
}

type GetRecipesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecipeIds             []string               `protobuf:"bytes,1,rep,name=recipeIds,proto3" json:"recipeIds,omitempty"`
	UserId                string                 `protobuf:"bytes,2,opt,name=userId,proto3" json:"userId,omitempty"`
	PageSize              *int32                 `protobuf:"varint,3,opt,name=pageSize,proto3,oneof" json:"pageSize,omitempty"`
	AuthorId              *string                `protobuf:"bytes,4,opt,name=authorId,proto3,oneof" json:"authorId,omitempty"`
	Owned                 bool                   `protobuf:"varint,5,opt,name=owned,proto3" json:"owned,omitempty"`
	Saved                 bool                   `protobuf:"varint,6,opt,name=saved,proto3" json:"saved,omitempty"`
	Search                *string                `protobuf:"bytes,7,opt,name=search,proto3,oneof" json:"search,omitempty"`
	Sorting               *string                `protobuf:"bytes,8,opt,name=sorting,proto3,oneof" json:"sorting,omitempty"`
	LastRecipeId          *string                `protobuf:"bytes,9,opt,name=lastRecipeId,proto3,oneof" json:"lastRecipeId,omitempty"`
	LastCreationTimestamp *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=lastCreationTimestamp,proto3" json:"lastCreationTimestamp,omitempty"`
	LastUpdateTimestamp   *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=lastUpdateTimestamp,proto3" json:"lastUpdateTimestamp,omitempty"`
	LastRating            *float32               `protobuf:"fixed32,12,opt,name=lastRating,proto3,oneof" json:"lastRating,omitempty"`
	LastVotes             *int32                 `protobuf:"varint,13,opt,name=lastVotes,proto3,oneof" json:"lastVotes,omitempty"`
	LastTime              *int32                 `protobuf:"varint,14,opt,name=lastTime,proto3,oneof" json:"lastTime,omitempty"`
	LastCalories          *int32                 `protobuf:"varint,15,opt,name=lastCalories,proto3,oneof" json:"lastCalories,omitempty"`
	MinRating             *int32                 `protobuf:"varint,16,opt,name=minRating,proto3,oneof" json:"minRating,omitempty"`
	MaxRating             *int32                 `protobuf:"varint,17,opt,name=maxRating,proto3,oneof" json:"maxRating,omitempty"`
	MinTime               *int32                 `protobuf:"varint,18,opt,name=minTime,proto3,oneof" json:"minTime,omitempty"`
	MaxTime               *int32                 `protobuf:"varint,19,opt,name=maxTime,proto3,oneof" json:"maxTime,omitempty"`
	MinServings           *int32                 `protobuf:"varint,20,opt,name=minServings,proto3,oneof" json:"minServings,omitempty"`
	MaxServings           *int32                 `protobuf:"varint,21,opt,name=maxServings,proto3,oneof" json:"maxServings,omitempty"`
	MinCalories           *int32                 `protobuf:"varint,22,opt,name=minCalories,proto3,oneof" json:"minCalories,omitempty"`
	MaxCalories           *int32                 `protobuf:"varint,23,opt,name=maxCalories,proto3,oneof" json:"maxCalories,omitempty"`
	RecipeLanguages       []string               `protobuf:"bytes,24,rep,name=recipeLanguages,proto3" json:"recipeLanguages,omitempty"`
	UserLanguage          *string                `protobuf:"bytes,25,opt,name=userLanguage,proto3,oneof" json:"userLanguage,omitempty"`
	Tags                  []string               `protobuf:"bytes,26,rep,name=tags,proto3" json:"tags,omitempty"`
}

func (x *GetRecipesRequest) Reset() {
	*x = GetRecipesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_get_recipes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecipesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipesRequest) ProtoMessage() {}

func (x *GetRecipesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_get_recipes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipesRequest.ProtoReflect.Descriptor instead.
func (*GetRecipesRequest) Descriptor() ([]byte, []int) {
	return file_v1_get_recipes_proto_rawDescGZIP(), []int{1}
}

func (x *GetRecipesRequest) GetRecipeIds() []string {
	if x != nil {
		return x.RecipeIds
	}
	return nil
}

func (x *GetRecipesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetRecipesRequest) GetPageSize() int32 {
	if x != nil && x.PageSize != nil {
		return *x.PageSize
	}
	return 0
}

func (x *GetRecipesRequest) GetAuthorId() string {
	if x != nil && x.AuthorId != nil {
		return *x.AuthorId
	}
	return ""
}

func (x *GetRecipesRequest) GetOwned() bool {
	if x != nil {
		return x.Owned
	}
	return false
}

func (x *GetRecipesRequest) GetSaved() bool {
	if x != nil {
		return x.Saved
	}
	return false
}

func (x *GetRecipesRequest) GetSearch() string {
	if x != nil && x.Search != nil {
		return *x.Search
	}
	return ""
}

func (x *GetRecipesRequest) GetSorting() string {
	if x != nil && x.Sorting != nil {
		return *x.Sorting
	}
	return ""
}

func (x *GetRecipesRequest) GetLastRecipeId() string {
	if x != nil && x.LastRecipeId != nil {
		return *x.LastRecipeId
	}
	return ""
}

func (x *GetRecipesRequest) GetLastCreationTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastCreationTimestamp
	}
	return nil
}

func (x *GetRecipesRequest) GetLastUpdateTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateTimestamp
	}
	return nil
}

func (x *GetRecipesRequest) GetLastRating() float32 {
	if x != nil && x.LastRating != nil {
		return *x.LastRating
	}
	return 0
}

func (x *GetRecipesRequest) GetLastVotes() int32 {
	if x != nil && x.LastVotes != nil {
		return *x.LastVotes
	}
	return 0
}

func (x *GetRecipesRequest) GetLastTime() int32 {
	if x != nil && x.LastTime != nil {
		return *x.LastTime
	}
	return 0
}

func (x *GetRecipesRequest) GetLastCalories() int32 {
	if x != nil && x.LastCalories != nil {
		return *x.LastCalories
	}
	return 0
}

func (x *GetRecipesRequest) GetMinRating() int32 {
	if x != nil && x.MinRating != nil {
		return *x.MinRating
	}
	return 0
}

func (x *GetRecipesRequest) GetMaxRating() int32 {
	if x != nil && x.MaxRating != nil {
		return *x.MaxRating
	}
	return 0
}

func (x *GetRecipesRequest) GetMinTime() int32 {
	if x != nil && x.MinTime != nil {
		return *x.MinTime
	}
	return 0
}

func (x *GetRecipesRequest) GetMaxTime() int32 {
	if x != nil && x.MaxTime != nil {
		return *x.MaxTime
	}
	return 0
}

func (x *GetRecipesRequest) GetMinServings() int32 {
	if x != nil && x.MinServings != nil {
		return *x.MinServings
	}
	return 0
}

func (x *GetRecipesRequest) GetMaxServings() int32 {
	if x != nil && x.MaxServings != nil {
		return *x.MaxServings
	}
	return 0
}

func (x *GetRecipesRequest) GetMinCalories() int32 {
	if x != nil && x.MinCalories != nil {
		return *x.MinCalories
	}
	return 0
}

func (x *GetRecipesRequest) GetMaxCalories() int32 {
	if x != nil && x.MaxCalories != nil {
		return *x.MaxCalories
	}
	return 0
}

func (x *GetRecipesRequest) GetRecipeLanguages() []string {
	if x != nil {
		return x.RecipeLanguages
	}
	return nil
}

func (x *GetRecipesRequest) GetUserLanguage() string {
	if x != nil && x.UserLanguage != nil {
		return *x.UserLanguage
	}
	return ""
}

func (x *GetRecipesRequest) GetTags() []string {
	if x != nil {
		return x.Tags
	}
	return nil
}

type GetRecipesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Recipes    []*RecipeInfo                  `protobuf:"bytes,1,rep,name=recipes,proto3" json:"recipes,omitempty"`
	Categories map[string]*RecipeCategoryInfo `protobuf:"bytes,3,rep,name=categories,proto3" json:"categories,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Tags       map[string]*RecipeTag          `protobuf:"bytes,2,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TagGroups  map[string]string              `protobuf:"bytes,4,rep,name=tagGroups,proto3" json:"tagGroups,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetRecipesResponse) Reset() {
	*x = GetRecipesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_get_recipes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecipesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecipesResponse) ProtoMessage() {}

func (x *GetRecipesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_get_recipes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecipesResponse.ProtoReflect.Descriptor instead.
func (*GetRecipesResponse) Descriptor() ([]byte, []int) {
	return file_v1_get_recipes_proto_rawDescGZIP(), []int{2}
}

func (x *GetRecipesResponse) GetRecipes() []*RecipeInfo {
	if x != nil {
		return x.Recipes
	}
	return nil
}

func (x *GetRecipesResponse) GetCategories() map[string]*RecipeCategoryInfo {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *GetRecipesResponse) GetTags() map[string]*RecipeTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GetRecipesResponse) GetTagGroups() map[string]string {
	if x != nil {
		return x.TagGroups
	}
	return nil
}

var File_v1_get_recipes_proto protoreflect.FileDescriptor

var file_v1_get_recipes_proto_rawDesc = []byte{
	0x0a, 0x14, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x2d, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65,
	0x2d, 0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf0, 0x06, 0x0a, 0x0a, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x63,
	0x69, 0x70, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41,
	0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0b, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x53, 0x61, 0x76,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x53, 0x61, 0x76, 0x65,
	0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x88,
	0x01, 0x01, 0x12, 0x48, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x44, 0x0a, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x13, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x46,
	0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x75, 0x72, 0x69, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x08, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77,
	0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0xd7, 0x09,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08,
	0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x6f,
	0x77, 0x6e, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x61, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x73, 0x61, 0x76, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x06, 0x73, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x73, 0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70,
	0x65, 0x49, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x50, 0x0a, 0x15,
	0x6c, 0x61, 0x73, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4c,
	0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0a,
	0x6c, 0x61, 0x73, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02,
	0x48, 0x05, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x06, 0x52, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x56, 0x6f, 0x74, 0x65,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x27, 0x0a, 0x0c, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6c,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x0c, 0x6c,
	0x61, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x21,
	0x0a, 0x09, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x09, 0x52, 0x09, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x21, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x07, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0d, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6d, 0x61, 0x78,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0e,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x53, 0x65, 0x72, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x25, 0x0a, 0x0b, 0x6d, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0f, 0x52, 0x0b, 0x6d, 0x69, 0x6e, 0x43, 0x61, 0x6c, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x43, 0x61,
	0x6c, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x10, 0x52, 0x0b,
	0x6d, 0x61, 0x78, 0x43, 0x61, 0x6c, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x28,
	0x0a, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72,
	0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x48, 0x11,
	0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x49, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x73,
	0x6f, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x6c, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x69, 0x6e, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x61, 0x78, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6d, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6d,
	0x61, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x69, 0x6e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x69, 0x6e, 0x43, 0x61,
	0x6c, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78, 0x43, 0x61,
	0x6c, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x4c,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x22, 0xde, 0x03, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x07, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x34, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x43, 0x0a, 0x09, 0x74, 0x61, 0x67, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x54, 0x61, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x74, 0x61, 0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x55, 0x0a, 0x0f, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x46, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x54, 0x61, 0x67, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x54, 0x61,
	0x67, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x3d, 0x5a, 0x3b, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x70, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x6c,
	0x69, 0x65, 0x2f, 0x63, 0x68, 0x65, 0x66, 0x62, 0x6f, 0x6f, 0x6b, 0x2d, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2d, 0x72, 0x65, 0x63, 0x69, 0x70, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_get_recipes_proto_rawDescOnce sync.Once
	file_v1_get_recipes_proto_rawDescData = file_v1_get_recipes_proto_rawDesc
)

func file_v1_get_recipes_proto_rawDescGZIP() []byte {
	file_v1_get_recipes_proto_rawDescOnce.Do(func() {
		file_v1_get_recipes_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_get_recipes_proto_rawDescData)
	})
	return file_v1_get_recipes_proto_rawDescData
}

var file_v1_get_recipes_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_v1_get_recipes_proto_goTypes = []interface{}{
	(*RecipeInfo)(nil),            // 0: v1.RecipeInfo
	(*GetRecipesRequest)(nil),     // 1: v1.GetRecipesRequest
	(*GetRecipesResponse)(nil),    // 2: v1.GetRecipesResponse
	nil,                           // 3: v1.GetRecipesResponse.CategoriesEntry
	nil,                           // 4: v1.GetRecipesResponse.TagsEntry
	nil,                           // 5: v1.GetRecipesResponse.TagGroupsEntry
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
	(*RecipeCategoryInfo)(nil),    // 7: v1.RecipeCategoryInfo
	(*RecipeTag)(nil),             // 8: v1.RecipeTag
}
var file_v1_get_recipes_proto_depIdxs = []int32{
	6,  // 0: v1.RecipeInfo.creationTimestamp:type_name -> google.protobuf.Timestamp
	6,  // 1: v1.RecipeInfo.updateTimestamp:type_name -> google.protobuf.Timestamp
	6,  // 2: v1.GetRecipesRequest.lastCreationTimestamp:type_name -> google.protobuf.Timestamp
	6,  // 3: v1.GetRecipesRequest.lastUpdateTimestamp:type_name -> google.protobuf.Timestamp
	0,  // 4: v1.GetRecipesResponse.recipes:type_name -> v1.RecipeInfo
	3,  // 5: v1.GetRecipesResponse.categories:type_name -> v1.GetRecipesResponse.CategoriesEntry
	4,  // 6: v1.GetRecipesResponse.tags:type_name -> v1.GetRecipesResponse.TagsEntry
	5,  // 7: v1.GetRecipesResponse.tagGroups:type_name -> v1.GetRecipesResponse.TagGroupsEntry
	7,  // 8: v1.GetRecipesResponse.CategoriesEntry.value:type_name -> v1.RecipeCategoryInfo
	8,  // 9: v1.GetRecipesResponse.TagsEntry.value:type_name -> v1.RecipeTag
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_v1_get_recipes_proto_init() }
func file_v1_get_recipes_proto_init() {
	if File_v1_get_recipes_proto != nil {
		return
	}
	file_v1_recipe_category_proto_init()
	file_v1_recipe_tag_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_get_recipes_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecipeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_get_recipes_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecipesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_get_recipes_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecipesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_get_recipes_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_v1_get_recipes_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_get_recipes_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_get_recipes_proto_goTypes,
		DependencyIndexes: file_v1_get_recipes_proto_depIdxs,
		MessageInfos:      file_v1_get_recipes_proto_msgTypes,
	}.Build()
	File_v1_get_recipes_proto = out.File
	file_v1_get_recipes_proto_rawDesc = nil
	file_v1_get_recipes_proto_goTypes = nil
	file_v1_get_recipes_proto_depIdxs = nil
}
